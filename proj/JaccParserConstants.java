/* Generated By:JavaCC: Do not edit this line. JaccParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JaccParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ABSTRACT = 6;
  /** RegularExpression Id. */
  int BOOLEAN = 7;
  /** RegularExpression Id. */
  int BREAK = 8;
  /** RegularExpression Id. */
  int BYTE = 9;
  /** RegularExpression Id. */
  int CASE = 10;
  /** RegularExpression Id. */
  int CATCH = 11;
  /** RegularExpression Id. */
  int CHAR = 12;
  /** RegularExpression Id. */
  int CLASS = 13;
  /** RegularExpression Id. */
  int CONST = 14;
  /** RegularExpression Id. */
  int CONTINUE = 15;
  /** RegularExpression Id. */
  int _DEFAULT = 16;
  /** RegularExpression Id. */
  int DO = 17;
  /** RegularExpression Id. */
  int DOUBLE = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int EXTENDS = 20;
  /** RegularExpression Id. */
  int FALSE = 21;
  /** RegularExpression Id. */
  int FINAL = 22;
  /** RegularExpression Id. */
  int FINALLY = 23;
  /** RegularExpression Id. */
  int FLOAT = 24;
  /** RegularExpression Id. */
  int FOR = 25;
  /** RegularExpression Id. */
  int GOTO = 26;
  /** RegularExpression Id. */
  int IF = 27;
  /** RegularExpression Id. */
  int IMPLEMENTS = 28;
  /** RegularExpression Id. */
  int IMPORT = 29;
  /** RegularExpression Id. */
  int INSTANCEOF = 30;
  /** RegularExpression Id. */
  int INT = 31;
  /** RegularExpression Id. */
  int INTERFACE = 32;
  /** RegularExpression Id. */
  int LONG = 33;
  /** RegularExpression Id. */
  int NATIVE = 34;
  /** RegularExpression Id. */
  int NEW = 35;
  /** RegularExpression Id. */
  int NULL = 36;
  /** RegularExpression Id. */
  int PACKAGE = 37;
  /** RegularExpression Id. */
  int PRIVATE = 38;
  /** RegularExpression Id. */
  int PROTECTED = 39;
  /** RegularExpression Id. */
  int PUBLIC = 40;
  /** RegularExpression Id. */
  int RETURN = 41;
  /** RegularExpression Id. */
  int SHORT = 42;
  /** RegularExpression Id. */
  int STATIC = 43;
  /** RegularExpression Id. */
  int SUPER = 44;
  /** RegularExpression Id. */
  int SWITCH = 45;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 46;
  /** RegularExpression Id. */
  int THIS = 47;
  /** RegularExpression Id. */
  int THROW = 48;
  /** RegularExpression Id. */
  int THROWS = 49;
  /** RegularExpression Id. */
  int TRANSIENT = 50;
  /** RegularExpression Id. */
  int TRUE = 51;
  /** RegularExpression Id. */
  int TRY = 52;
  /** RegularExpression Id. */
  int VOID = 53;
  /** RegularExpression Id. */
  int VOLATILE = 54;
  /** RegularExpression Id. */
  int WHILE = 55;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 56;
  /** RegularExpression Id. */
  int IDENTIFIER = 57;
  /** RegularExpression Id. */
  int LPAREN = 58;
  /** RegularExpression Id. */
  int RPAREN = 59;
  /** RegularExpression Id. */
  int LBRACE = 60;
  /** RegularExpression Id. */
  int RBRACE = 61;
  /** RegularExpression Id. */
  int LBRACKET = 62;
  /** RegularExpression Id. */
  int RBRACKET = 63;
  /** RegularExpression Id. */
  int SEMICOLON = 64;
  /** RegularExpression Id. */
  int COMMA = 65;
  /** RegularExpression Id. */
  int DOT = 66;
  /** RegularExpression Id. */
  int ASSIGN = 67;
  /** RegularExpression Id. */
  int GT = 68;
  /** RegularExpression Id. */
  int LT = 69;
  /** RegularExpression Id. */
  int BANG = 70;
  /** RegularExpression Id. */
  int TILDE = 71;
  /** RegularExpression Id. */
  int HOOK = 72;
  /** RegularExpression Id. */
  int COLON = 73;
  /** RegularExpression Id. */
  int EQ = 74;
  /** RegularExpression Id. */
  int LE = 75;
  /** RegularExpression Id. */
  int GE = 76;
  /** RegularExpression Id. */
  int NE = 77;
  /** RegularExpression Id. */
  int SC_OR = 78;
  /** RegularExpression Id. */
  int SC_AND = 79;
  /** RegularExpression Id. */
  int PLUS = 80;
  /** RegularExpression Id. */
  int MINUS = 81;
  /** RegularExpression Id. */
  int STAR = 82;
  /** RegularExpression Id. */
  int SLASH = 83;
  /** RegularExpression Id. */
  int REM = 84;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<DECIMAL_LITERAL>",
    "<IDENTIFIER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
  };

}
